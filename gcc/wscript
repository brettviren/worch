#!/usr/bin/env python
# encoding: utf-8


from orch import features

gcc_dl_preq_feat_name = 'gccdlpreq'

@features.TaskGen.feature(gcc_dl_preq_feat_name)
def feature_gccdlpreq(self):
    '''
    Download GCC prerequisites using GCC's download script.
    '''
    requirements = dict(features.tarball_requirements, dlpreq_result = 'mpc')

    pfi = features.PackageFeatureInfo(self.package_name, gcc_dl_preq_feat_name,
                                      self.bld, requirements)

    d_source = pfi.get_node('source_dir')
    d_unpacked = pfi.get_node('source_unpacked', d_source)
    f_unpack = pfi.get_node('unpacked_target', d_unpacked)
    f_dlpreq = pfi.get_node('dlpreq_result', d_unpacked)

    print 'DLPREQ_RESULT',f_dlpreq,f_dlpreq.abspath()

    step_name = 'gcc_dlpreq'
    self.bld(name = step_name,
             cwd = d_unpacked.abspath(),
             rule = './contrib/download_prerequisites',
             source = f_unpack, target = f_dlpreq, 
             depends_on = ['gcc_unpack'],
             env = pfi.env)

    # if this doesn't work, need to make gcc_prepare depend on this in the config file?
    wait = self.bld.get_tgen_by_name('gcc_prepare')
    wait.depends_on.append(step_name)
    print 'WAIT', wait.__dict__
    

def build(bld):
    pkgname = 'gcc'

    print ('Hi, I am %s' % pkgname.upper())
    print ('\n'.join(['%s:%s' % kv for kv in bld.__dict__.items()]))

    pkgdata = bld.env.orch_package_dict[pkgname]
    feats =  gcc_dl_preq_feat_name + ' ' + pkgdata.get('features')
    bld(name = '%s_%s' % (pkgname, feats.replace(' ','_')), 
        features = feats, package_name = pkgname)


    
