#+TITLE: Worch and UPS

[[https://github.com/brettviren/worch][Worch]] has support for building [[http://www.fnal.gov/docs/products/ups/][UPS]] as it does any other package.  In addition it can generate UPS "table", "version" and "chain" files for packages that it builds based on the information in the worch configuration.   In this way, worch-built suites may have their user environment set up using UPS (see also [[./modules.org]]). Worch itself does not rely on UPS to do any of this.

Worch also provides a mechanism by which packages can be configured to build inside an environment that is augmented by UPS setup.

* Installation of UPS

Worch can build the UPS binaries themselves from source.  The native UPS build mechanism is rather baroque but it can be shoe-horned into the usual =tarball, prepare, makemake= feature trio.  In addition, a =upsdb= feature must be added in order to initialize the UPS "database" directory (as set by the worch =ups_products= variable) and a =upspkg= feature (see next section) should be added to setup the "version" and "chain" files for UPS itself.

* Producing UPS configuration files

UPS "table", "version" and "chain" files for a package built by worch will be created by adding =upspkg= to the package's feature list.  The worch variable =ups_prod_dir_prefix= must be set in order to locate the base of the binary package installation area.  See below for UPS restrictions that relate to the setting of this variable.

* Building a package that requires UPS

As with any dependency, a package which requires UPS to be installed may depend on it via the usual worch methods: the =depends= and =environment= worch configuration items and/or by placing UPS in a group that precedes the one holding the package in question.  Like with all packages a =ups_install_dir= can be used to locate its =install_dir=.

* Building a package that assumes a UPS setup environment exists

If a package's native build system assumes that a UPS environment has already been set up one needs to tell worch this.  To do this the usual =buildenv_*= mechanism is used with a =shell:= command type.  For example:

#+BEGIN_EXAMPLE
[package somepackage]
buildenv_upssetup = shell:source {ups_products}/setup
...
#+END_EXAMPLE

Caveats:

 - This only setups up UPS and this only applies to the package
 - Worch does not currently propagate shell functions so the crucial =setup= function is lost here, only environment variables are saved.

* Building a package that relies on UPS to setup another package

The same mechanism as show above is extended to allow UPS to setup any environment for a dependency.

#+BEGIN_EXAMPLE
[package somepackage]
buildenv_upssetup = shell:source {ups_products}/setup && setup package1 && setup package2
buildenv_upssetup_more = shell:source {ups_products}/setup && setup package3
...
#+END_EXAMPLE

Note:

 - adding UPS generated environment can be done through multiple calls to the =setup= function
 - these calls can be spread across multiple =buildenv_*= items
 - each must source the UPS setup script before using its defined function (see caveats from previous section).

It is also possible to move this UPS setup crap to the package on which another depends.  However, this is bad design as it is inflicting UPS on a package that does not require it in order to help a package that does. Nevertheless this can be done like:

#+BEGIN_EXAMPLE
[package somedependency]
export_upssetup = shell:source {ups_products}/setup && setup {package}
...

[package somepackage]
depends = package:somedependency
...
#+END_EXAMPLE

* Note on UPS database and binary installation directories.

The "standard" way to set up user environment with UPS is to first =source= the =setup= script which will be found at the top of the UPS "database" directory and then to use the defined shell alias/function =setup= to further set environment for a particular package.  UPS makes certain assumptions about the layout of the installation directories.  In particular, one must "overlay" the UPS "database" directory structure with the installation structure that worch is told to produce for the package binaries.
In this case the worch configuration variable =install_dir= must be defined as ={ups_products}/{ups_prod_subdir}= where the latter is ={package}/{ups_version_string}=.  The UPS version string is traditionally =v{version_underscore}=.

* Example:

For a working example, see the small example suite under [[../examples/simple-with-ups/]].  It illustrates both how to have an end-user environment manged by UPS as well as how to mix in UPS dependencies to the build.

#+BEGIN_EXAMPLE
$ waf --prefix=install --orch-config=examples/simple-with-ups/simple.cfg configure build
...
hello is at /data3/bv/w/worch/install-ups/hello/v2_8
Hello, world!
hello is at /data3/bv/w/worch/install-ups/hello/v2_8, bc is at /data3/bv/w/worch/install-ups/bc/v1_06
bc 1.06
Copyright 1991-1994, 1997, 1998, 2000 Free Software Foundation, Inc.
Hello, world!

$ source ./install/setup
$ ups list -aK+
"bc" "v1_06" "Linux64bit+2.6-2.12" "" "current" 
"hello" "v2_8" "Linux64bit+2.6-2.12" "" "current" 
"ups" "v5_0_0" "Linux64bit+2.6-2.12" "" "current" 
$ setup hello
$ hello
Hello, world!
#+END_EXAMPLE

Un-fscking-believable.

* Random notes about UPS itself:

The UPS manual is misleading.

** UPS environment variables

 - =PRODUCTS= :: A colon-separated path list of UPS "database" directories
 - =UPS_THIS_DB= :: A particular UPS "database" directory referenced internally by files in that DB
 - ={PACKAGE}_DIR= :: The path to the location of the installed package binaries.  
 - =PROD_DIR_PREFIX= :: The above var can be relative to this and is usually degenerate with =PRODUCTS=.

** UPS database files

*** Database-level 

 - =.upsfiles/dbconfig= :: marks a UPS "database" directory and provides two important variables:
   - =VERSION_SUBDIR= :: undocumented, controls if the version file is a file or a directory of many files each named after flavor_qualifiers.  
   - =PROD_DIR_PREFIX= :: points to top-level directory holding binaries described by this UPS DB.  For degenerate binary/database directories this is set to =${UPS_THIS_DIR}=.

*** Package level

Each package has a portion of the UPS "database" held in directories and files under =${ups_products}/{package}/=.  Relative to this path they are:

 - ={ups_prod_dir}/ups/{package}.table= :: the UPS "table" file which is used to set up the environment for the package (and in principle to build it from source).  It is typical for it to define the ={PACKAGE}_DIR= variable described above.
 - ={ups_version_string}.version/{ups_flavor}_{ups_qualifiers}= :: defines variables to find the table file for a given version, flavor and qualifier.  In particular:
   - =PROD_DIR= :: directory holding the =ups/{package}.table= file
   - =UPS_DIR= :: location of the directory, usually =ups/=, holding (some) UPS database files, in particular the table file.
   - =TABLE_FILE= :: location of the table file.  If relative, then w.r.t. =UPS_DIR= (but see [[http://www.fnal.gov/docs/products/ups/ReferenceManual/html/versionfiles.html#35235][these details]]).
 - ={package}/current.chain/{ups_flavor}_{ups_qualifiers}= :: adds the package to the "current chain" by associating it with a package name, version, flavor and qualifiers.

** Eyeballing an installation at FNAL

*** UPS itself

#+BEGIN_EXAMPLE
$ cat /nusoft/app/externals/ups/v5_0_1.version/Linux64bit+2.6-2.5_ 
FILE = version
PRODUCT = ups
VERSION = v5_0_1

#*************************************************
#
FLAVOR = Linux64bit+2.6-2.5
QUALIFIERS = ""
  DECLARER = garren
  DECLARED = 2013-10-25 22.02.00 GMT
  MODIFIER = garren
  MODIFIED = 2013-10-25 22.02.00 GMT
  PROD_DIR = ups/v5_0_1/Linux64bit+2.6-2.5
  UPS_DIR = ups
  TABLE_FILE = ups.table
#+END_EXAMPLE

Table file is at 
#+BEGIN_EXAMPLE
/nusoft/app/externals/ups/v5_0_1/Linux64bit+2.6-2.5/ups/ups.table
#+END_EXAMPLE

Binaries are at:
#+BEGIN_EXAMPLE
/nusoft/app/externals/ups/v5_0_1/Linux64bit+2.6-2.5/
#+END_EXAMPLE

*** CMake

#+BEGIN_EXAMPLE
$ cat /nusoft/app/externals/cmake/v2_8_8.version/Linux64bit+2.6-2.5_ 
FILE = version
PRODUCT = cmake
VERSION = v2_8_8

#*************************************************
#
FLAVOR = Linux64bit+2.6-2.5
QUALIFIERS = ""
  DECLARER = fwdev
  DECLARED = 2013-08-29 16.00.11 GMT
  MODIFIER = fwdev
  MODIFIED = 2013-08-29 16.00.11 GMT
  PROD_DIR = cmake/v2_8_8
  UPS_DIR = ups
  TABLE_FILE = cmake.table
#+END_EXAMPLE

Table file is at:
#+BEGIN_EXAMPLE
/nusoft/app/externals/cmake/v2_8_8/ups/cmake.table
#+END_EXAMPLE

Binaries are at:
#+BEGIN_EXAMPLE
/nusoft/app/externals/cmake/v2_8_8/Linux64bit+2.6-2.5
#+END_EXAMPLE

*** ROOT

#+BEGIN_EXAMPLE
$ grep PROD_DIR /nusoft/app/externals/root/v5_34_09b.version/Linux64bit+2.6-2.5_*
/nusoft/app/externals/root/v5_34_09b.version/Linux64bit+2.6-2.5_debug_e4:  PROD_DIR = root/v5_34_09b
/nusoft/app/externals/root/v5_34_09b.version/Linux64bit+2.6-2.5_debug_e4_nu:  PROD_DIR = root/v5_34_09b
/nusoft/app/externals/root/v5_34_09b.version/Linux64bit+2.6-2.5_e4_nu_prof:  PROD_DIR = root/v5_34_09b
/nusoft/app/externals/root/v5_34_09b.version/Linux64bit+2.6-2.5_e4_prof:  PROD_DIR = root/v5_34_09b
#+END_EXAMPLE

Separate binary directories for each under:
#+BEGIN_EXAMPLE
/nusoft/app/externals/root/v5_34_09b/Linux64bit+*/
#+END_EXAMPLE

Single table file for everything under the sun:
#+BEGIN_EXAMPLE
/nusoft/app/externals/root/v5_34_09b/ups/root.table
#+END_EXAMPLE

"Flavor" is "ANY", qualifiers differentiate.
