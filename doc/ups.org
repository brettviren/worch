#+title: Worch and UPS

[[https://github.com/brettviren/worch][Worch]] has support for building [[http://www.fnal.gov/docs/products/ups/][UPS]] as it does any other package.  In addition it can generate UPS "table", "version" and "chain" files for packages that it builds based on the information in the worch configuration.  Worch itself does not rely on UPS to do any of this.

* Installation of UPS

Worch can build the UPS binaries themselves from source.  The native UPS build system is rather baroque but it can be shoe-horned into the usual =tarball, prepare, makemake= feature trio.  In addition, a =upsdb= must be added in order to initialize the UPS "database" directory (as set by the worch =ups_products= variable) to be initialized and a =upspkg= feature (see next section) should be added to setup the "version" and "chain" files for UPS itself.

The "standard" way for a user to setup for running UPS commands is to =source= the =setup= script which will be found at the top of the UPS "database" directory.  For this to work, the worch =install_dir= for the UPS package itself, which normally points to where the binaries are installed, must instead point to a proper location under the directory to which the worch =ups_products= variable points.  See the example suite under [[../examples/simple-with-ups/]].  

* Producing UPS configuration files

UPS "table", "version" and "chain" files for a package built by worch will be created by adding =upspkg= to the package's feature list.  The worch variable =ups_prod_dir_prefix= must be set in order to locate the base of the binary package installation area.  

* Building packages which depend on UPS

In order to make the =ups= program available for later operations it should be built in an early worch group.  Packages that rely on UPS to build tend to have build systems that assume the =setup= script mentioned above has already been "sourced".  

** FIXME: How to handle this implicit sourcing?

* UPS database and binary installation directories.

Some native build systems rely on UPS environment to pre-exist and more extremely assume that UPS variables defined to locate UPS configuration files also locate installed package binaries.  The build system for the ART framework is one such case.  If the worch software suite is to be built in such a way to support this degenerate arrangement then =ups_products= and =ups_prod_dir_prefix= must coincide as must the =install_dir= and ={ups_products}/{package}/{ups_version_string}= settings.

* Example:

#+BEGIN_EXAMPLE
$ waf --prefix=install --orch-config=examples/simple-with-ups/simple.cfg configure build
$ source ./install/setup
$ ups list -aK+
"bc" "v1_06" "Linux64bit+2.6-2.12" "" "current" 
"hello" "v2_8" "Linux64bit+2.6-2.12" "" "current" 
"ups" "v5_0_0" "Linux64bit+2.6-2.12" "" "current" 
$ setup hello
$ hello
Hello, world!
#+END_EXAMPLE

Unfscking believable.

* Notes about UPS:

The UPS manual is misleading.

** UPS environment variables

 - =PRODUCTS= :: A colon-separated path list of UPS "database" directories
 - =UPS_THIS_DB= :: A particular UPS "database" directory referenced internally by files in that DB
 - ={PACKAGE}_DIR= :: The path to the location of the installed package binaries.  
 - =PROD_DIR_PREFIX= :: The above var can be relative to this and is usually degenerate with =PRODUCTS=.

** UPS database files

*** Database-level 

 - =.upsfiles/dbconfig= :: marks a UPS "database" directory and provides two important variables:
   - =VERSION_SUBDIR= :: undocumented, controls if the version file is a file or a directory of many files each named after flavor_qualifiers.  
   - =PROD_DIR_PREFIX= :: points to top-level directory holding binaries described by this UPS DB.  For degenerate binary/database directories this is set to =${UPS_THIS_DIR}=.

*** Package level

Each package has a portion of the UPS "database" held in directories and files under =${ups_products}/{package}/=.  Relative to this path they are:

 - ={ups_prod_dir}/ups/{package}.table= :: the UPS "table" file which is used to set up the environment for the package (and in principle to build it from source).  It is typical for it to define the ={PACKAGE}_DIR= variable described above.
 - ={ups_version_string}.version/{ups_flavor}_{ups_qualifiers}= :: defines variables to find the table file for a given version, flavor and qualifier.  In particular:
   - =PROD_DIR= :: directory holding the =ups/{package}.table= file
   - =UPS_DIR= :: location of the directory, usually =ups/=, holding (some) UPS database files, in particular the table file.
   - =TABLE_FILE= :: location of the table file.  If relative, then w.r.t. =UPS_DIR= (but see [[http://www.fnal.gov/docs/products/ups/ReferenceManual/html/versionfiles.html#35235][these details]]).
 - ={package}/current.chain/{ups_flavor}_{ups_qualifiers}= :: adds the package to the "current chain" by associating it with a package name, version, flavor and qualifiers.
