[group externals]
# todo for root:  postgresql, pythia, fftw
#todo: cry, genie, lhapdf

packages = libxml2, sqlite, python, libsigcpp, tbb, xrootd, root, geant, xerces-c, log4cpp, mysql, cry
environment = group:buildtools, group:compiler

[package libxml2]
version = 2.8.0
source_url = ftp://xmlsoft.org/{package}/{source_archive_file}
build_target = libxml2.la
install_target = lib/libxml2.a

[package sqlite]
version = 3.7.17
source_url = http://www.sqlite.org/2013/{package}-autoconf-3071700.tar.gz
source_unpacked = {package}-autoconf-3071700
build_target = sqlite3
install_target = bin/sqlite3

# relies on pythia/wscript
[package pythia]
features = tarball pythiainst
version = 6
source_unpacked = {package}{version}
source_archive_file = {source_unpacked}.tar.gz
source_url = ftp://root.cern.ch/root/{source_archive_file}
build_target = libPythia6.so
install_target = lib/libPythia6.so


[package python]
version = 2.7.3
source_unpacked = Python-{version}
source_archive_file = {source_unpacked}.tgz
source_url = http://www.python.org/ftp/{package}/{version}/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --enable-shared
build_target = python
install_target = bin/python
export_PATH = prepend:{install_dir}/bin
export_PYTHONHOME = set:{install_dir}
export LD_LIBRARY_PATH = prepend:{install_dir}/lib


[package libsigcpp]
version = 2.2.10
source_unpacked = libsigc++-{version}
source_archive_file = {source_unpacked}.tar.bz2
source_url = http://ftp.gnome.org/pub/GNOME/sources/libsigc++/{version_2digit}/{source_archive_file}
build_target = sigc++/signal.lo
install_target = lib/pkgconfig



# tbb is a way messed up package. a tbb/wscript override is used
[package tbb]
features = tarball tbbbuild
version = 4.1.3
# inconsistently named tarball
source_unpacked = tbb41_20130314oss
srcpkg_ext = tgz
# gratuitious wart _src
source_archive_file = {source_unpacked}_src.{srcpkg_ext}
# TBB web site makes it impossible to directly download, screw 'em and cache ourselves
#source_url = http://threadingbuildingblocks.org/sites/default/files/software_releases/source/{source_archive_file}
source_url = http://www.phy.bnl.gov/~bviren/lbne/{source_archive_file}
# gotta do in-source build, trick tarball into unpacking in the build area
source_dir = builds
unpacked_target = Makefile
# Non standard location to build - must match source unpacked
build_dir = builds/{source_unpacked}
# the rest is handled by tbbbuild feature

[package xrootd]
features = tarball cmake makemake
depends = prepare:cmake_install
version = 3.3.3
source_url = http://xrootd.slac.stanford.edu/download/v{version}/{source_archive_file}
source_url_checksum = md5:8c2a2d66a684a8f4395c02ae249f5706
source_archive_file = {source_unpacked}.tar.gz
build_target = src/xrdcp
install_target = bin/xrdcp
export_XRDSYS = {install_dir}

[package fftw]
version = 3.3.3
source_url = http://www.fftw.org/{source_archive_file}
# fixme: has an --enable-debug
prepare_cmd_options = --enable-shared
build_target = libfftw3.la
install_target = lib/libfftw3.a

[package postgresql]
version = 9.1.5
depends = prepare:python_install
source_archive_ext = tar.bz2
source_url = http://ftp.postgresql.org/pub/source/v{version}/{source_archive_file}
prepare_cmd_options = --with-krb5 --with-gssapi --with-python
build_target = src/backend/postgres
install_target = bin/postgres

[package root]
environment = group:buildtools, group:compiler, package:xrootd, package:python
features = tarball cmake makemake
version = 5.34.09
depends = prepare:xrootd_install, prepare:python_install, prepare:fftw_install, prepare:libxml2_install, prepare:pythia_install
# fixme: need to depend on libxml2, pythia, mysql, postgresql when fixing the enables below
source_url = ftp://root.cern.ch/{package}/{source_archive_file}
source_archive_file = {package}_v{version}.source.tar.gz
# fixme: ROOT does not unpack into a version-specific directory.  this
# WILL cause problems if the sampe build area is shared by multiple
# build types.
source_unpacked = {package}
unpacked_target = CMakeLists.txt
# fixme: hardcodes python2.7.
# need to explicitly set python locations else ROOT picks up other system pythons
prepare_cmd_options = -Dminuit2=ON -Dc++11=ON -Dxrootd=ON -Dpython=ON -Dgdml=ON -Dxml=ON -Dxfg=OFF -DPYTHON_LIBRARY={python_install_dir}/lib/libpython2.7.so -DPYTHON_INCLUDE_DIR={python_install_dir}/include/python2.7 -DPYTHIA6_LIBRARY={pythia_install_dir}/lib -DPOSTGRESQL_INCLUDE_DIR={postgresql_install_dir}/include -DPOSTGRESQL_LIBRARIES={postgresql_install_dir}/lib -DMYSQL_DIR={mysql_install_dir} -DFFTW_DIR={fftw_install_dir}
#this isn't in Lynn's "nu" group, but why not have it?
# --enable-roofit \
build_cmd = make -j{NCPUS}
build_target = bin/root.exe
install_target = bin/root.exe
buildenv_VERBOSE = set:1
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
export_PATH = prepend:{install_dir}/bin
export_ROOTSYS = set:{install_dir}

[package geant]
features = tarball cmake makemake
version = 4.9.6.p02
source_archive_file = {source_unpacked}.tar.gz
source_url = http://geant4.cern.ch/support/source/{source_archive_file}
source_unpacked = {package}{version}
# cmake -DG4_ENABLE_CXX11=ON -DCMAKE_INSTALL_PREFIX=${GEANT4_FQ_DIR} -DGEANT4_USE_SYSTEM_CLHEP=ON -DCLHEP_ROOT_DIR:STRING="${CLHEP_BASE_DIR}" -DBUILD_STATIC_LIBS=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_GDML=ON -DXERCESC_ROOT_DIR:STRING="${XERCESCROOT}" -DCMAKE_BUILD_TYPE=Debug ${GEANT4_SOURCE}
# fixme: hardcode compiler name
depends = prepare:xerces-c_install
prepare_cmd_options = -DG4_ENABLE_CXX11=ON -DBUILD_STATIC_LIBS=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_GDML=ON -DXERCESC_ROOT_DIR:STRING={xerces-c_install_dir} 
build_target = outputs/library/{kernelname}-g++/libG4track.so
install_target = include/Geant4/G4Track.hh
build_cmd = make -j{NCPUS}
export_LD_LIBRARY_PATH = prepend:{install_dir}/{libbits}

[package xerces-c]
version = 3.1.1
source_url = http://mirror.metrocast.net/apache//xerces/c/3/sources/{source_archive_file}
build_target = src/libxerces-c.la
install_target = lib/libxerces-c.la
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib

[package log4cpp]
version = 1.1
source_unpacked = {package}
source_archive_file = {package}-{version}.{source_archive_ext}
source_url = http://downloads.sourceforge.net/project/log4cpp/{package}-{version}.x (new)/{package}-{version}/{source_archive_file}
build_target = src/.libs/liblog4cpp.a
install_target = lib/liblog4cpp.so
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib

[package mysql]
features = tarball cmake makemake
version = 5.6.13
# warning: this url is likely dead by the time you use it. freakin' oracle man.
source_url = http://dev.mysql.com/get/Downloads/MySQL-5.6/{source_archive_file}/from/http://cdn.mysql.com/
prepare_cmd_options = -DCMAKE_CXX_FLAGS="-std=c++11 -Wno-deprecated-declarations" -DCMAKE_BUILD_TYPE:STRING=Release
# for reasons unknown mysql does not make the sql/share intermediate directory which barfs the build
build_cmd = mkdir -p sql/share && make
build_target = libmysql/libmysqlclient.a
#install_target = bin/mysql
# for some reason, bin/mysql is not getting built
install_target = lib/libmysqlclient.so
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
export_PATH = prepend:{install_dir}/bin

[package cry]
version = 1.7
source_unpacked = {package}_v{version}
source_archive_file = {source_unpacked}.{source_archive_ext}
source_url = http://nuclear.llnl.gov/simulation/{source_archive_file}
build_target = lib/libCRY.so
install_target = lib/libCRY.so
